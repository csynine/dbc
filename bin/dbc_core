#!/usr/bin/env python2.7

import os
import sys
from tornado.ioloop import IOLoop
from tornado.web import Application, RequestHandler
import tornado.httpserver
import json

from dbc import block
from dbc.state import State
from dbc.options import get_options
from dbc.api.transfer import Transfer as Transfer_API
from dbc.api.block import Block as Block_API
from dbc.api.account import Account as Account_API
from dbc.api.mine import Mine
from dbc.sync import sync_all
from dbc import utils
from dbc.log import LOG

options = get_options()


def dir_check():
    if not os.path.isdir(options.chain_dir):
        LOG.info('create main dir: %s' % options.chain_dir)
        os.mkdir(options.chain_dir)
    if not os.path.isdir(options.chain_dir+'/block'):
        LOG.info('create block dir: %s' % options.chain_dir+'/block')
        os.mkdir(options.chain_dir+'/block')
    if not os.path.isdir(options.chain_dir+'/utxo'):
        LOG.info('create block dir: %s' % options.chain_dir+'/utxo')
        os.mkdir(options.chain_dir+'/utxo')

def create_genesis_block(miner_addr):
    if os.path.isfile(options.chain_dir+'/block/head.json'):
        LOG.info("Genesis Block is exist, exit")
        sys.exit(1)
    content = file(options.genesis_file).read()
    genesis_json = json.loads(content)
    LOG.info("Create Genesis Block")
    genesis_block = block.create_genesis_block(genesis_json, miner_addr)
    genesis_block.save()

def main():
    dir_check()
    miner_addr = utils.get_miner_addr()
    if options.genesis_file:
        create_genesis_block(miner_addr)
    peers = [peer.strip() for peer in options.peer_nodes.split(",")]
    if not os.path.isfile(options.block_path_format % (options.chain_dir, 'head')):
        sync_all(peers)
    last_block = block.get_last_block()
    state = State(miner_addr, last_block, [], peers, options.mine)
    app = Application(handlers=[
        (r"/transfer", Transfer_API, dict(state=state)),
        (r"/mine", Mine, dict(state=state)),
        (r"/block$", Block_API, dict(state=state)),
        (r"/block/([a-zA-Z0-9-,]+)$", Block_API, dict(state=state)),
        (r"/account$", Account_API),
        (r"/account/([a-zA-Z0-9-,]+)$", Account_API)
    ])
    server = tornado.httpserver.HTTPServer(app)
    server.bind(options.api_port)
    server.start(1)
    IOLoop.current().start()




if __name__ =="__main__":
    LOG.info("all config options list:")
    for k, v in options.items():
        LOG.info("%s: %s" % (k, v))
    main()
